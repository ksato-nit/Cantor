#include <iostream>
#include <chrono>
#include "number.hpp"
#include "extended_number.hpp"
#include "polynomial.hpp"
#include "extended_polynomial.hpp"
#include "mumford.hpp"
#include "extended_mumford.hpp"
#include "extended_mumford_projective.hpp"
#include "mumford_projective.hpp"
#include "mumford_weighted_projective.hpp"

int main(){
    std::chrono::system_clock::time_point start, end;

    mpz_init_set_str(ExtendedNumber::CHARA, "125914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);
    mpz_init_set_str(ExtendedNumber::MCHARA, "-125914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);

    int fc[7] = {-1, 3, 6, -2, -3, 1, 1};
    int hc[1] = {0};

    ExtendedPolynomial f(6, fc);
    ExtendedPolynomial h(0, hc);

    mpz_set_str(f.coeff[6].re, "8466513544981363739495995401403986190198791063967237387704772145379849872097171681865556085749925661846640665194406820386404783360114272022044575258596092611929336774661139516214329498409968902160791412900605464436296371549438226607267998367361669975931227249551745641977828627404131042384771635582427438003", 10);
    mpz_set_str(f.coeff[5].re, "90208595511970406697937884115173443953454065940305149692890134419440899671615587393836488211833518383697688573270243026293629454554394344016407510997256206674512963881942929695446733160524812973039765417029007899766713093401719526142944348070087216130812680584132820438649399017878732375067772017875690000405", 10);
    mpz_set_str(f.coeff[4].re, "117649798508980584899684114259042918106516077958804405363897831506900551171922234977619006589601040309883705178278756690180371265232475012800652362018249326182512759463273813338930319355160991470590711768821788218933574396191219906847579416075392386586520707612153853510078428665841783979409674647757827229171", 10);
    mpz_set_str(f.coeff[3].re, "15918430988935738096441218747828446917411829569919201214732914629096351339504089686985950442338672293693875205539703505006159207836378199302943321946086986217512391430403179733167966232741278049403348440769542942122867336085030839673001437719992715053309256405227697814974143475787634558928618058571645183718", 10);
    mpz_set_str(f.coeff[2].re, "45982751705546967002482535757936466750904269224887053086111296215869657269048482371761701360910960943073692916051570692732720248437609720568292938910544182808001299306908576331249266601085701033015265606349406164446821943795979727314865741952900727540431174858550459192242209737757543866849136282389831928977", 10);
    mpz_set_str(f.coeff[1].re, "80998811257327425837059349099105165409970716507058340255179594875949531118483938580452822304079735150075233330018611018030951053966233745580679582033079120188086724993149476810991533823543572098110674030197996815969159507417633818947607398332400136662301177519229581530012042092468633190372300417738643686614", 10);
    mpz_set_str(f.coeff[0].re, "40718409633680449376638414243853908497598668688877855877691312276411699407203721884889937846408652732098283257563631331154220437776797094532661000131881379945969891017355601651478171336178991664328110942313122769978308809003532119420638274688044041165316533108039861492080147446907066066071288398541300145458", 10);

    ExtendedNumber u11, u10, v11, v10;
    mpz_set_str(u11.re, "125914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398685", 10);
    mpz_set_str(u11.im, "125914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398690", 10);
    mpz_set_str(u10.re, "5", 10);
    mpz_set_str(u10.im, "5", 10);
    mpz_set_str(v11.re, "-105417147823639954201211528512951491191276797315180282262860891030557693389678747671632134435671903407480118299991789005304278577834669697272753399719827209955707698524929909809989405412315594003457166616588668239865119131828140793893156802098436758984646201942984965208311555899879874545541576289655229608216", 10);
    mpz_set_str(v11.im, "-41067419559164422801288810911878593975315631469956361207818319126254968454755741955352287090658037671979810809268018878651084447346582208907010087287520187949220156452000065369698282627922942605914959242938129126556976199775787816514723239124368628817481147711238768994100626798912315773998913690872237647516", 10);
    mpz_set_str(v10.re, "-102488157340484986319516457437294517565965646970666027999405494872746045274622260434205050590621649615018969046813752592264166914314787082617221387912433603408852136271772857982360858406587998619601575766822602928196281052473689282374579957582789887316731533405623619537246282677051235280315815967849193952375", 10);
    mpz_set_str(v10.im, "-122645177336194952649847183101499653202443696977913430606131020470534288551109272193763755128321109279995092252249354310884050739115366777622998500169551151328911629847459969415431871665634917488875381848037603604585849551019085777806833896487842203929127239477133667740348893222760308061175509933155418360005", 10);
    ExtendedMumford D1(f, h, u11, u10, v11, v10);
    ExtendedProjectiveMumford D1P(f, h, u11, u10, v11, v10);


    ExtendedNumber num, num2, num3;
    mpz_init_set_str(num.re, "85914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);
    mpz_init_set_str(num.im, "75914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);
    mpz_init_set_str(num2.re, "625914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);
    mpz_init_set_str(num2.im, "55914779291736951465114820000410394704469926709313487862741990005106902444603199758473144553796233330483912109354539523757111960697627113796197677302313930637478125779284481406461577093633193727377481769953188825504375342322878650368072793614994736447992508624109689115760812435290121601604739483225068398691", 10);

    std::cout << "加算" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 100000; ++i){
        mpz_add(num.re, num.re, num2.re);
        mpz_add(num.im, num.im, num2.im);
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;
    int time_add = std::chrono::duration_cast<std::chrono::microseconds>(end-start).count();
    mpz_mod(num.re, num.re, ExtendedNumber::CHARA);
    mpz_mod(num.im, num.im, ExtendedNumber::CHARA);

    mpz_t temp;
    mpz_init(temp);
    std::cout << "乗算" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 100000; ++i){
        mpz_mul(num3.re, num.re, num2.re);
        mpz_mod(num3.re, num3.re, ExtendedNumber::CHARA);
        mpz_mul(temp, num.im, num2.im);
        mpz_mod(temp, temp, ExtendedNumber::CHARA);
        mpz_sub(num3.re, num3.re, temp);
        mpz_mul(num3.im, num.re, num2.im);
        mpz_mod(num3.im, num3.im, ExtendedNumber::CHARA);
        mpz_mul(temp, num.im, num2.re);
        mpz_mod(temp, temp, ExtendedNumber::CHARA);
        mpz_add(num3.im, num3.im, temp);
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;
    int time_mul = std::chrono::duration_cast<std::chrono::microseconds>(end-start).count();

    std::cout << "2乗算" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 100000; ++i){
        mpz_mul(num3.re, num.re, num.re);
        mpz_mod(num3.re, num3.re, ExtendedNumber::CHARA);
        mpz_mul(temp, num.im, num.im);
        mpz_mod(temp, temp, ExtendedNumber::CHARA);
        mpz_sub(num3.re, num3.re, temp);
        mpz_mul(num3.im, num.re, num.im);
        mpz_mod(num3.im, num3.im, ExtendedNumber::CHARA);
        mpz_mul(temp, num.im, num.re);
        mpz_mod(temp, temp, ExtendedNumber::CHARA);
        mpz_add(num3.im, num3.im, temp);
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;
    int time_sqr = std::chrono::duration_cast<std::chrono::microseconds>(end-start).count();

    std::cout << "逆元" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 100000; ++i){
        mpz_t denom;
        mpz_init(denom);
        mpz_mul(temp, num.re, num.re);
        mpz_mod(temp, temp, ExtendedNumber::CHARA);
        mpz_mul(denom, num.im, num.im);
        mpz_mod(denom, denom, ExtendedNumber::CHARA);
        mpz_add(denom, denom, temp);
        ExtendedMumford::constant_invert(denom, denom, ExtendedNumber::CHARA);
        mpz_mul(num.re, num.re, denom);
        mpz_mod(num.re, num.re, ExtendedNumber::CHARA);
        mpz_mul(num.im, num.im, denom);
        mpz_mod(num.im, num.im, ExtendedNumber::CHARA);
        mpz_neg(num.im, num.im);
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;
    int time_inv = std::chrono::duration_cast<std::chrono::microseconds>(end-start).count();

    std::cout << "I / M : " << (float) time_inv / time_mul << std::endl;
    std::cout << "M / S : " << (float) time_mul / time_sqr << std::endl;
    std::cout << "M / a : " << (float) time_mul / time_add << std::endl;

    mpz_class k(ExtendedNumber::CHARA);
    mpz_class one_class(1);
    k = k + one_class;
    k = k * k;

    std::cout << "アフィン Lange" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 10; ++i){
        ExtendedMumford Dk = D1 * k;
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;

    std::cout << "アフィン Costello" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 10; ++i){
        ExtendedMumford Dk = D1.CostelloScalarMultiple(k);
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;

    std::cout << "射影Lange" << std::endl;
    start = std::chrono::system_clock::now();
    for(int i = 0; i < 10; ++i){
        ExtendedProjectiveMumford DP = D1P * k;
    }
    end = std::chrono::system_clock::now();
    std::cout << "処理時間:" << std::chrono::duration_cast<std::chrono::microseconds>(end-start).count() << std::endl;

    return 0;
}
